/*===================================================================================
   strip-units() : convert 14px/14em/etc to (int)14
  =================================================================================== */

	@function strip-units($number) {

		@if ($number == null) {

			@return null;

		}

		@return $number / ($number * 0 + 1);

	}


/*===================================================================================
   variables
  =================================================================================== */

	// layouts -- the pixel width of the Photoshop file for each layout
	$desktop-layout: 	1250px;
	$tablet-layout: 	640px;
	$mobile-layout: 	320px;

	// breakpoints -- the browser window size at which the layout should change
	$desktop-min: 		900px;
	$tablet-max: 		899px;
	$tablet-min: 		601px;
	$mobile-max: 		600px;




html {
	// fall back for older android native browsers
	@for $i from (320/2) through (strip-units($mobile-max)/2) {
		@media screen and (width: $i * 2px - 1px), (width: $i * 2px) {
			font-size: ($i * 2px) / strip-units($mobile-layout);
		}
	}
}

html {
	// 1vw = 1% of browser-width
	// our layout is designed at a certain width, in this case that 
	// layout width is stored in the variable $mobile-layout.
	// I want to set the font-size to a vw value such that when 
	// the browser-width = $mobile-layout, 1rem = 1px so that when 
	// I measure something in photoshop to be 32px I can just set it 
	// to 32rem in the css and it will match the photoshop file and scale.

		// 1% of browser-width = 1vw

	// or writen another way

		// browser-width * 0.01 = 1vw

	// because we said above that we want to find the vw value for 1px
	// when browser-width = $mobile-layout, we can substitute 
	// browser-width = $mobile-layout

		// $mobile-layout * 0.01 = 1vw

	// separate the px units from the value

		// strip-units($mobile-layout) * 1px * 0.01 = 1vw

	// divide both sides by 0.01

		// strip-units($mobile-layout) * 1px = 100vw

	// divide both sides by strip-units($mobile-layout)

		// 1px = 100vw/strip-units($mobile-layout)

	// so simple we don't even need a mixin
	font-size: (100vw/strip-units($mobile-layout));

	// do the same for each layout
	@media screen and (min-width: $tablet-min) {
		font-size: (100vw/strip-units($tablet-layout));
	}
	// setting a max amount that your layout can scale is easy
	@media screen and (min-width: ($tablet-layout * 1.2)) {
		// once the layout has increased to 120 percent, 
		// stop the scaling by setting a fixed font-size
		// in this case 1px * 120%, or 1px * 1.2 = 1.2px
		// again, so simple we don't need a mixin
		font-size: 1.2px;
	}

	@media screen and (min-width: $desktop-min) {
		font-size: (100vw/strip-units($desktop-layout));
	}
	// it is also easy to set a minimum amount for your layout to scale to
	@media screen and (min-width: $desktop-min) and (max-width: ($desktop-layout * 0.8)) {
		// once the layout has decreased to 80 percent, 
		// stop the scaling by setting a fixed font-size
		// again, 1px * 80%, or 1px * 0.8 = 0.8px
		font-size: 0.8px;
	}
}

body {
	margin: 0;
}

// Example usage
h1 {
	//simply open the photoshop file and click on the text filed and 
	// copy and paste the exact pixel value form the Photoshop text size and 
	// use it as the rem value to declare your font-szie, or anything really
	font-size: 28rem;
	// rem's can be used for anything where you would normally use em's
	margin: 6rem 10rem;
	@media screen and (min-width: $tablet-min) {
		// as your layout changes at different break points, simply set new values
		font-size: 32rem;
		margin: 11rem 16rem;
	}
	@media screen and (min-width: $desktop-min) {
		font-size: 36rem;
		margin: 12rem 18rem;
	}
}

// Your layout will now scale just like it would if you were zooming in and out of a Photoshop file.


// Advanced techniques

/* INTRINSIC RATIO */

// Lots of things become a lot easier with vw's. For example,
// if you want an image or video to maintain it's aspect ratio,
// just set its height and width in rem's and the will scale together.
.wide-screen-video {
	width: 640rem;
	height: 360rem;
}


/* FILL INTRINSICALLY */

// This box will always fix fully in the browser window.
.fill-intrinsically {
	margin: auto;
	background-color: lightgreen;
	font-size: 5vw;
	height: 56.25vw;
	width: 100vw;
}

@media screen and (min-aspect-ratio: 16/9) {
	.fill-intrinsically {
		background-color: lightblue;
		height: 100vh;
		width: 177.77777778vh;
		font-size: 8.888888889vh;
	}
}


/* SCALABLE COMPONENTS */

// Set the font-size of the base element of your component to font-size: 1rem;  
// and for all the measurements inside your component use em's.
// Now in your component 1em = 1px in your layout. But remember that em's 
// are relative to the parent element, so if the font-size is set on any of 
// the elements between the component base element and where you are using em's 
// you will need to use the following formula to calculate your em value.

// size-you-want/context-size

// For example if you have a 24px heading (font-size: 24em;) and you want
// a margin of 5px, you will have to divide 5/24 to get the em value 

.my-component {
	font-size: 1rem;
	h1 {
		font-size: 24em;
		margin: (5/24) * 1em;
	}
}

// Now when you need to reuse the component somewhere else at a different size,
// simply change the font-size of the base element of your component, and the
// component and all of its elements will scale.

// Here is how we got that formula. In the context of the H1, 1em = 24px
// The question is how many em's = 5px? Let's use algebra to do a unit conversion from 5px to em's

// how many em's = 12px?
// 12/10

// 1em = 24px 
// 1em/24px = 1
// 5px * 1em/24px = 5px
// 5px/24px * 1em = 5px
// 5/24 * 1em = 5px

// And we just let SASS do the division

// margin: (5/24) * 1em;

// The general form is: (size-you-want/context-size) * 1em;
// Again, so simple we don't really even need a mixin.
// But if you really want one, check out the px2rem function below.
// And don't forget, you can use the technique described above 
// to set max and/or min scaling at the component base element level.

/*===================================================================================
   px2em() : convert from pixels to em's, based on the context (inherited font-size in pixels)
  =================================================================================== */

	@function px2em($pixels, $context) {

		$pixels    : strip-units($pixels);
		$context   : strip-units($context);
		@return #{$pixels/$context}em

	}


/* BODY WIDTH BUG */

// There is a bug/feature in many browsers where 100vw != 100% on the body element.
// It has to do with scroll bars being taken into account for % but not for vw's.
// There is a relatively easy fix. This will force the body to be 100vw's wide,
// and then if 100vw's is larger than 100% it applies a negative margin to center the
// body. The only caveat is that a little bit of your page will be trimmed on the sides.
body {
	width: 100vw;
	margin-left: calc((100% - 100vw) / 2);
	overflow-x: hidden;
}
